#include "Register.h"

#define dregs_lo(x)         (decode_dregs_lo[(x) & 7])
#define dregs_hi(x)         (decode_dregs_hi[(x) & 7])
#define dregs(x)            (decode_dregs[(x) & 7])
#define dregs_byte(x)       (decode_dregs_byte[(x) & 7])
#define pregs(x)			(decode_pregs[(x) & 7])
#define spfp(x)				(decode_spfp[(x) & 1])
#define dregs_hilo(x, i)	(decode_dregs_hilo[((i) << 3) | (x)])
#define accum_ext(x)		(decode_accum_ext[(x) & 1])
#define accum_word(x)		(decode_accum_word[(x) & 1])
#define accum(x)			(decode_accum[(x) & 1])
#define iregs(x)            (decode_iregs[(x) & 3])
#define mregs(x)            (decode_mregs[(x) & 3])
#define bregs(x)            (decode_bregs[(x) & 3])
#define lregs(x)            (decode_lregs[(x) & 3])
#define dpregs(x)           (decode_dpregs[(x) & 15])
#define gregs(x, i)         (decode_gregs[((i) << 3) | (x)])
#define regs(x, i)          (decode_regs[((i) << 3) | (x)])
#define regs_lo(x, i)       (decode_regs_lo[((i) << 3) | (x)])
#define regs_hi(x, i)       (decode_regs_hi[((i) << 3) | (x)])
#define statbits(x)         (decode_statbits[(x) & 31])
#define counters(x)         (decode_counters[(x) & 1])
#define dregs2_sysregs1(x)  (decode_dregs2_sysregs1[(x) & 7])

#define IS_DREG(g,r)		((g) == 0 && (r) < 8)
#define IS_PREG(g,r)		((g) == 1 && (r) < 8)
#define IS_AREG(g,r)		((g) == 4 && (r) >= 0 && (r) < 4)
#define IS_GENREG(g,r)		((((g) == 0 || (g) == 1) && (r) < 8) || IS_AREG (g, r))
#define IS_DAGREG(g,r)		(((g) == 2 || (g) == 3) && (r) < 8)
#define IS_SYSREG(g,r)		(((g) == 4 && ((r) == 6 || (r) == 7)) || (g) == 6 || (g) == 7)
#define IS_RESERVEDREG(g,r)	(((r) > 7) || ((g) == 4 && ((r) == 4 || (r) == 5)) || (g) == 5)
#define allreg(r,g)			(!IS_RESERVEDREG (g, r))
#define mostreg(r,g)		(!(IS_DREG (g, r) || IS_PREG (g, r) || IS_RESERVEDREG (g, r)))
#define allregs(x, i)		(decode_allregs[((i) << 3) | (x)])

#define uimm16s4(x)			    decodeImmValue (c_uimm16s4, x, 0, false)
#define uimm16s4d(x)		    decodeImmValue (c_uimm16s4d, x, 0, false)
#define negimm5s4(x)	        decodeImmValue (c_negimm5s4, x, 0, false)
#define rimm16(x)	            decodeImmValue (c_rimm16, x, 0, false)
#define huimm16(x)	            decodeImmValue (c_huimm16, x, 0, false)
#define imm16(x)	            decodeImmValue (c_imm16, x, 0, false)
#define imm16d(x)	            decodeImmValue (c_imm16d, x, 0, false)
#define uimm2(x)	            decodeImmValue (c_uimm2, x, 0, false)
#define uimm3(x)	            decodeImmValue (c_uimm3, x, 0, false)
#define luimm16(x)	            decodeImmValue (c_luimm16, x, 0, false)
#define uimm4(x)	            decodeImmValue (c_uimm4, x, 0, false)
#define uimm5(x)	            decodeImmValue (c_uimm5, x, 0, false)
#define imm16s2(x)	            decodeImmValue (c_imm16s2, x, 0, false)
#define uimm8(x)	            decodeImmValue (c_uimm8, x, 0, false)
#define imm16s4(x)	            decodeImmValue (c_imm16s4, x, 0, false)
#define uimm4s2(x)	            decodeImmValue (c_uimm4s2, x, 0, false)
#define uimm4s4(x)	            decodeImmValue (c_uimm4s4, x, 0, false)
#define uimm4s4d(x)	            decodeImmValue (c_uimm4s4d, x, 0, false)
#define imm3(x)		            decodeImmValue (c_imm3, x, 0, false)
#define imm4(x)		            decodeImmValue (c_imm4, x, 0, false)
#define uimm8s4(x)	            decodeImmValue (c_uimm8s4, x, 0, false)
#define imm5(x)		            decodeImmValue (c_imm5, x, 0, false)
#define imm5d(x)	            decodeImmValue (c_imm5d, x, 0, false)
#define imm6(x)		            decodeImmValue (c_imm6, x, 0, false)
#define imm7(x)		            decodeImmValue (c_imm7, x, 0, false)
#define imm7d(x)	            decodeImmValue (c_imm7d, x, 0, false)
#define imm8(x)		            decodeImmValue (c_imm8, x, 0, false)
#define uimm16(x)	            decodeImmValue (c_uimm16, x, 0, false)
#define uimm32(x)	            decodeImmValue (c_uimm32, x, 0, false)
#define imm32(x)	            decodeImmValue (c_imm32, x, 0, false)
#define huimm32(x)	            decodeImmValue (c_huimm32, x, 0, false)
#define huimm32e(x)	            decodeImmValue (c_huimm32e, x, 0, false)
#define imm7_val(x)	            decodeImmValue (c_imm7, x, 0, false)
#define imm16_val(x)	        decodeImmValue (c_uimm16, x, 0, false)
#define luimm16_val(x)	        decodeImmValue (c_luimm16, x, 0, false)

// These originally took a "PC" argument to do absolute address calculations.
// Pretty sure I'm going to mark a flag and let the lifter do the math,
// but add them back again if they are useful.
#define pcrel4(x)			    decodeImmValue (c_pcrel4, x, 0, false)
#define pcrel8(x)			    decodeImmValue (c_pcrel8, x, 0, false)
#define pcrel8s4(x)			    decodeImmValue (c_pcrel8s4, x, 0, false)
#define pcrel10(x)	            decodeImmValue (c_pcrel10, x, 0, false)
#define pcrel12(x)			    decodeImmValue (c_pcrel12, x, 0, false)
#define lppcrel10(x)	        decodeImmValue (c_lppcrel10, x, 0, false)
#define pcrel24(x)	            decodeImmValue (c_pcrel24, x, 0, false)

#define pcrel4_abs(x)			decodeImmValue (c_pcrel4, x, pc, true)
#define pcrel8_abs(x)			decodeImmValue (c_pcrel8, x, pc, true)
#define pcrel8s4_abs(x)			decodeImmValue (c_pcrel8s4, x, pc, true)
#define lppcrel10_abs(x)	    decodeImmValue (c_lppcrel10, x, pc, true)
#define pcrel10_abs(x)	        decodeImmValue (c_pcrel10, x, pc, true)
#define pcrel12_abs(x)			decodeImmValue (c_pcrel12, x, pc, true)
#define luimm16_val_abs(x)	    decodeImmValue (c_luimm16, x, 0, true)
#define huimm16_abs(x)	        decodeImmValue (c_huimm16, x, 0, true)
#define rimm16_abs(x)	        decodeImmValue (c_rimm16, x, 0, true)
#define pcrel24_abs(x)	        decodeImmValue (c_pcrel24, x, pc, true)
#define huimm32_abs(x)	        decodeImmValue (c_huimm32, x, 0, true)
#define huimm32e_abs(x)	        decodeImmValue (c_huimm32e, x, 0, true)

int decodeImmValue(const_forms_t cf, int x, unsigned int pc, bool abs_addr);
